@startuml 

title Eisfeld - Class Diagram 

Interface IControllable {
    +void step(Direction dir) 
    +void pickUp(Item i) 
    +void clearSnow() 
    +void digItemUp() 
    +void savePlayers(Direction dir) 
    +void putSignalTogether(SignalFlare sg) 
    +void passRound() 
}
Player ..|> IControllable

abstract class Player { 
    -int BodyHeat 
    -int ID 
    -int workPoints 
    -boolean inWater 
    -Item inHand 
    -Item wearing 
    +void startRound() 
    +void fallInWater() 
    +void ateFood() 
    +void changeBodyHeat(signed int thisMuch) 
    +void wear(DivingSuit suit) 
    -boolean hasEnoughWorkPoints(int cost) 
} 

class Eskimo { 
    -int BodyHeat = 5 
    -void buildIglu() 
} 

class Researcher { 
    -int BodyHeat = 4 
    -void detectCapacity() 
} 

Player --> Direction 

class PlayerContainer { 
    +Player getPlayer(int pid) 
} 

PlayerContainer "pid" *-- Player 
Player <|-- Eskimo 
Player <|-- Researcher 

class SnowStorm { 
    +void tryStorm() 
} 

enum Activities { 
    savingPeople 
    clearingSnow 
    puttingOnSuit 
    eatingFood 
} 

abstract class Item { 
    +void thrownDown() 
    +void pickedUp(Player Picker) 
    +void diggedUp() 
    +void used(Player p, Activity a) 
} 

class Food { 
    +void used(Player p, Activity a) <<override>> 
} 

class Rope { 
    +void used(Player p, Activity a) <<override>> 
} 

class Shovel { 
    +void used(Player p, Activity a) <<override>> 
} 

class DivingSuit { 
    +void used(Player p, Activity a) <<override>> 
} 

class SignalFlarePart { 
    -int partID 
    +void used(Player p, Activity a) <<override>> 
} 

Item <|-- SignalFlarePart 
Item <|-left- Food 
Item <|-left- Rope 
Item <|-left- Shovel 
Item <|-left- DivingSuit 

class SignalFlare { 
    void putTogether(RoundController rc) 
} 

SignalFlarePart "3"--* SignalFlare 
SignalFlare ..> RoundController 
SignalFlare --> PositionLUT 

abstract class Tile { 
    #int x 
    #int y 
    #int snow 
    -boolean igluOn 
    +void steppedOn(Player p) 
    +void steppedOff(Direction dir) 
    +int changeSnow(signed int thisMuch) 
    +Tile getNeighbour(Direction dir)
    +void destroyIglu()
    +void buildIglu()
} 

class StableTile 
class UnstableTile { 
    -int capacity 
    +int standingHere 
} 

class SnowyHole

Tile <|-- StableTile 
Tile <|-- UnstableTile 
Tile <|-- SnowyHole 
Tile ..> Player 

enum Direction { 
    up 
    down 
    left 
    right 
} 

enum ItemState { 
    frozen 
    inHand 
    thrownDown 
} 

Item -down-> ItemState 
Tile --> Direction 
Item ..> Player 
Player --> Activities 

class PositionLUT << (S,#FF7700) Singleton >> { 
    +Tile getPosition(Player p) 
    +Tile getPosition(Item i) 
    +Player[] getPlayersOnTile(Tile t) 
    +Item[] getItemsOnTile(Tile t) 
    +Tile getTile(int x, int y) 
    +void setPosition(Player p) 
    +void setPosition(Item i) 
} 

PositionLUT "\tplayerTileMap        \n\t3..6        " o--> Player 
PositionLUT "\t\ttilePlayerMap   \n\t\t3..6   " o--> Player 
PositionLUT "tileList\n36" *-- Tile 
PositionLUT "itemTileMap\t\n0..7\t\t" o-- Item 
PositionLUT "tileItemMap\n0..7" o-- Item 

class RoundController { 
    -int curID 
    +void init(int playerNum) 
    +void startNextRound() 
    +void endLastRound()
    +void lose(String cause) 
    +void win() 
    +PlayerContainer getPlayerContainer() 
} 

RoundController --> "ss"SnowStorm 
RoundController --> "pc"PlayerContainer 
RoundController --> "it"Item 
RoundController --> "t"Tile 
RoundController --> "sg"SignalFlare
Player "roundController"--> RoundController 
SnowStorm --> PositionLUT 
SnowStorm ..> Player 

@enduml 
