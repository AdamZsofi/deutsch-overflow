@startuml 

title Spieler - Class Diagram Teil 1

Interface IControllable {
    +void step(Direction dir) 
    +void pickUp(Item i) 
    +void clearSnow() 
    +void digItemUp() 
    +void savePlayers(Direction dir) 
    +void putSignalTogether(SignalFlare sg) 
    +void passRound() 
}
Player ..|> IControllable

abstract class Player { 
    #int BodyHeat 
    #int ID 
    #int workPoints 
    #boolean inWater 
    #Item inHand 
    #Item wearing 
    +void startRound() 
    +void fallInWater() 
    +void ateFood() 
    +void changeBodyHeat(signed int thisMuch) 
    +void wear(DivingSuit suit) 
    #boolean hasEnoughWorkPoints(int cost) 
}
Player o-- "inHand\n0..1" Item

class Eskimo { 
    +void buildIglu() 
} 

class Researcher { 
    +void detectCapacity(Direction dir) 
} 

Player --> Direction 

class PlayerContainer { 
    +Player getPlayer(int pid) 
} 

PlayerContainer "pid" *-- Player 
Player <|-- Eskimo 
Player <|-- Researcher 

enum Activities { 
    savingPeople 
    clearingSnow 
    puttingOnSuit 
    eatingFood 
} 


enum Direction { 
    up 
    down 
    left 
    right 
} 

Player --> Activities 

class PositionLUT << (S,#FF7700) Singleton >> { 
    +Tile getPosition(Player p) 
    +Tile getPosition(Item i) 
    +Player[] getPlayersOnTile(Tile t) 
    +Item[] getItemsOnTile(Tile t) 
    +Tile getTile(int x, int y) 
    +void setPosition(Player p) 
    +void setPosition(Item i) 
} 

PositionLUT "\tplayerTileMap        \n\t3..6        " o--> Player 
PositionLUT "\t\ttilePlayerMap   \n\t\t3..6   " o--> Player 

class RoundController { 
    -int curID 
    +void init(int playerNum) 
    +void startNextRound() 
    +void endLastRound()
    +void lose(String cause) 
    +void win() 
    +PlayerContainer getPlayerContainer() 
} 

RoundController --> "pc"PlayerContainer 
Player "roundController"--> RoundController 

@enduml
